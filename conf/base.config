// Job paramaters to set for this environment


// Process setting

process {

  


  // Global cluster parameters
  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,140,7] ? 'retry' : 'finish' }
  maxRetries = 3
  maxErrors = '-1'

  // Specific cluster parameters for each process

  // software dependencies moved to conda.config

  withName:readData {
      memory = { check_max( 50.GB * task.attempt, 'memory' ) }
	time = { check_max( 120.h * task.attempt, 'time' ) }
	cpus = { check_max( 8 , 'cpus' ) }
      container = 'eikematthias/hlapublic:devel '
}
      withName:runBeagle {
      memory = { check_max( 20.GB * task.attempt, 'memory' ) }
      time = { check_max( 40.h * task.attempt, 'time' ) }
      cpus = { check_max( 8 , 'cpus' ) }
      container = 'eikematthias/hlapublic:devel '
}
withName:alignToReference {
      memory = { check_max( 20.GB * task.attempt, 'memory' ) }
      time = { check_max( 40.h * task.attempt, 'time' ) }
      cpus = { check_max( 8 , 'cpus' ) }
      container = 'eikematthias/hlapublic:devel '
}
  withName:imputeHLA {
        memory = { check_max( 250.GB * task.attempt, 'memory' ) }
        time = { check_max( 120.h * task.attempt, 'time' ) }
        cpus = { check_max( 22 , 'cpus' ) }
        container = 'eikematthias/hlapublic:devel '
  }
  withName:phaseSNPs {
        memory = { check_max( 10.GB * task.attempt, 'memory' ) }
        time = { check_max( 120.h * task.attempt, 'time' ) }
        cpus = { check_max( 8 , 'cpus' ) }
        container = 'eikematthias/hlapublic:devel '
  }
  withName:phaseHLA {
	memory = { check_max( 50.GB * task.attempt, 'memory' ) }
        time = { check_max( 48.h * task.attempt, 'time' ) }
        cpus = { check_max( 8 , 'cpus' ) }
        container = 'eikematthias/hlapublic:devel '
  }
  withName:imputeHLACombine {
        memory = { check_max( 50.GB * task.attempt, 'memory' ) }
        time = { check_max( 48.h * task.attempt, 'time' ) }
        container = 'eikematthias/hlapublic:devel '
  }
  withName:phaseHLACombine {
        memory = { check_max( 20.GB * task.attempt, 'memory' ) }
        time = { check_max( 48.h * task.attempt, 'time' ) }
        container = 'eikematthias/hlapublic:devel '
  }
    withName:report {
        memory = { check_max( 20.GB * task.attempt, 'memory' ) }
        time = { check_max( 40.h * task.attempt, 'time' ) }
        cpus = { check_max( 8 , 'cpus' ) }
        container = 'eikematthias/hlapublic:devel '
  }
}
