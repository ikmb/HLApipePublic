params {
	outdir = "results"
	plaintext_email = false
	logo = "${baseDir}/assets/ikmblogo.png"
	valid_pops = [ "AA", "AFR", "AMR", "CHN", "EAS", "EUR", "GER", "IND", "IRN", "JPN", "KOR", "MLT" ]
}

manifest {
	version = "1.0.1"
	description = "IKMB HLA Pipeline"
	author = "Frauke Degenhardt, Mareike Wendorff"
	homePage = "https://github.com/fdegenhardt-ikmb/HLApipePublic"
	nextflowVersion = "20.01.0"
}

timeline {
        enabled = true
        file = "${params.outdir}/pipeline_info/hla-pipeline_timeline.html"
}
report {
        enabled = true
        file = "${params.outdir}/pipeline_info/hla-pipeline_report.html"
}
trace {
        enabled = true
        file = "${params.outdir}/pipeline_info/hla-pipeline_trace.txt"
}
dag {
        enabled = true
        file = "${params.outdir}/pipeline_info/hla-pipeline_dag.svg"
}



profiles {
	standard {
		includeConfig 'conf/base.config'
    includeConfig 'conf/resources.config'
    includeConfig 'conf/medcluster.config'
	}
  local {
		includeConfig 'conf/base.config'
    includeConfig 'conf/resources.config'
    includeConfig 'conf/local.config'
	}
}



params {
  // Defaults only, expecting to be overwritten
  max_memory = 240.GB
  max_cpus = 12
  max_time = 48.h
  maxMultiqcEmailFileSize = 25.MB

}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
